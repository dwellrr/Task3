@{
    List<SelectListItem> jobList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Admin", Value = "admin" },
        new SelectListItem { Text = "Unknown", Value = "unknown" },
        new SelectListItem { Text = "Unemployed", Value = "unemployed" },
        new SelectListItem { Text = "Management", Value = "management" },
        new SelectListItem { Text = "Housemaid", Value = "housemaid" },
        new SelectListItem { Text = "Entrepreneur", Value = "entrepreneur" },
        new SelectListItem { Text = "Student", Value = "student" },
        new SelectListItem { Text = "Blue-collar", Value = "blue-collar" },
        new SelectListItem { Text = "Self-employed", Value = "self-employed" },
        new SelectListItem { Text = "Retired", Value = "retired" },
        new SelectListItem { Text = "Technician", Value = "technician" },
        new SelectListItem { Text = "Services", Value = "services" }
    };

    List<SelectListItem> marriedList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Married", Value = "married" },
        new SelectListItem { Text = "Divorced", Value = "divorced" },
        new SelectListItem { Text = "Single", Value = "single" }
    };

    List<SelectListItem> educationList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Unknown", Value = "unknown" },
        new SelectListItem { Text = "Secondary", Value = "secondary" },
        new SelectListItem { Text = "Primary", Value = "primary" },
        new SelectListItem { Text = "Tertiary", Value = "tertiary" }
    };

    List<SelectListItem> contactList = new List<SelectListItem>
    {
        new SelectListItem { Text = "Unknown", Value = "unknown" },
        new SelectListItem { Text = "Telephone", Value = "telephone" },
        new SelectListItem { Text = "Cellular", Value = "cellular" }
    };
}

@model Task3.Models.Client;
    <div>
        <div class="form-steps">
            <div class="step-icons">
                <div class="step-icon active">1</div>
                <div class="step-icon">2</div>
                <div class="step-icon">3</div>
            </div>
            <div class="step-forms">
                <div class="step-form active">
                    <!-- Form for Step 1 -->
                    <h2>Step 1: Personal Information</h2>
                    <!-- Input fields for Step 1 -->
                @Html.HiddenFor(m => m.Id)
                    <p>Name: @Html.TextBoxFor(m => m.Name)</p>
                    <p>Surname: @Html.TextBoxFor(m => m.Surname)</p>
                <p>Date of Birth: @Html.TextBoxFor(m => m.DateOfBirth, "{0:yyyy-MM-dd}", new { type = "date" })</p>
                    <p>Phone Number: @Html.TextBoxFor(m => m.PhoneNumber)</p>
                    <p>Card Number: @Html.TextBoxFor(m => m.CardNumber)</p>
                <p>
                    <label for="contact">Contact Communication Type:</label>
                    @Html.DropDownListFor(model => model.contact, contactList, new { @id = "contact", @class = "form-control" })
                </p>
                    <button class="next-step-button" type="button">Next Step</button>
                </div>
                <div class="step-form">
                    <!-- Form for Step 2 -->
                    <h2>Step 2: Additional Information</h2>
                    <!-- Input fields for Step 2 -->
                    <p>
                        Job:
                    @Html.DropDownListFor(model => model.job, jobList, new { @id = "job", @class = "form-control" })
                    </p>

                    <p>
                        Marital Status:
                    @Html.DropDownListFor(model => model.married, marriedList, new { @id = "married", @class = "form-control" })
                    </p>

                    <p>
                        Education:
                    @Html.DropDownListFor(model => model.education, educationList, new { @id = "education", @class = "form-control" })
                    </p>

                    <p>
                    Default:
                    @Html.RadioButtonFor(model => model.def, "yes", new { @id = "defaultYes" })
                    <label for="defaultYes">Yes</label>
                    @Html.RadioButtonFor(model => model.def, "no", new { @id = "defaultNo" })
                    <label for="defaultNo">No</label>
                    </p>

                <p>
                    Housing Loan:
                    @Html.RadioButtonFor(model => model.housing, "yes", new { @id = "housingYes" })
                    <label for="housingYes">Yes</label>
                    @Html.RadioButtonFor(model => model.housing, "no", new { @id = "housingNo" })
                    <label for="housingNo">No</label>
                </p>


                <p>
                    Personal Loan:
                    @Html.RadioButtonFor(model => model.loan, "yes", new { @id = "loanYes" })
                    <label for="loanYes">Yes</label>
                    @Html.RadioButtonFor(model => model.loan, "no", new { @id = "loanNo" })
                    <label for="loanNo">No</label>
                </p>
                    <button class="next-step-button" type="button">Next Step</button>
                </div>
                <div class="step-form">
                    <!-- Form for Step 3 -->
                    <h2>Step 3: Confirmation</h2>
                    <!-- Input fields for Step 3 -->
                    <button type="submit" id="submitButton">Save Client</button>
                </div>
            </div>
        </div>



    </div>



<script>
    document.addEventListener("DOMContentLoaded", function () {
        const stepIcons = document.querySelectorAll(".step-icon");
        const stepForms = document.querySelectorAll(".step-form");
        const nextButtons = document.querySelectorAll(".next-step-button");
        const form = document.getElementById("clientForm");
        const submitButton = document.getElementById("submitButton");

        submitButton.addEventListener("click", function (event) {
            if (!validateForm(form)) {
                // Prevent form submission if it's not valid
                event.preventDefault();
                // Optionally, display an error message or perform other actions
                alert("Please fill in all required fields.");
            }
        });

        // Function to activate the next step
        function activateNextStep(currentIndex) {
            // Activate next step icon
            stepIcons[currentIndex].classList.remove("active");
            stepIcons[currentIndex + 1].classList.add("active");

            // Show next step form
            stepForms[currentIndex].classList.remove("active");
            stepForms[currentIndex + 1].classList.add("active");
        }

        // Add event listeners to next step buttons
        nextButtons.forEach(function (button, index) {
            button.addEventListener("click", function () {
                // Get index of current active step
                const currentIndex = Array.from(nextButtons).indexOf(button);
                console.log("Current Index:", currentIndex);

                // Validate current form
                const currentStepDiv = document.querySelector(".step-form.active");
                console.log("equasion:", "#step" + (currentIndex + 1) + "Form");
                console.log("Current Form:", currentStepDiv);
                console.log("Parent Element:", stepForms[currentIndex]);

                if (validateCurrentStep(currentStepDiv)) {
                    // If form is valid, proceed to next step
                    activateNextStep(currentIndex);
                } else {
                    // If form is invalid, display an alert or error message
                    alert("Please fill in all fields before proceeding.");
                }
            });
        });

        // Add event listeners to step icons (for reference)
        stepIcons.forEach(function (icon, index) {
            icon.addEventListener("click", function () {
                // Activate clicked step icon
                stepIcons.forEach(function (icon) {
                    icon.classList.remove("active");
                });
                this.classList.add("active");

                // Show corresponding form
                stepForms.forEach(function (form) {
                    form.classList.remove("active");
                });
                stepForms[index].classList.add("active");
            });
        });

        function validateCurrentStep(currentStepDiv) {
            const inputs = currentStepDiv.querySelectorAll("input, select, textarea");

            // Check if all inputs within the current step are filled
            for (let i = 0; i < inputs.length; i++) {
                if (!inputs[i].value) {
                    return false; // Return false if any input is empty
                }
            }

            return true; // Return true if all inputs are filled
        }

        // Function to validate a form
        function validateForm(form) {
            if (!form) {
                console.error("Form element not found.");
                return false;
            }

            // Get all input elements within the form
            const inputs = form.querySelectorAll("input[type='text'], input[type='date'], select");

            // Check if any input field is empty
            for (let i = 0; i < inputs.length; i++) {
                if (!inputs[i].value) {
                    console.error("Empty field detected:", inputs[i]);
                    return false; // Return false if any field is empty
                }
            }

            // If all fields are filled, return true
            return true;
        }

    });
</script>